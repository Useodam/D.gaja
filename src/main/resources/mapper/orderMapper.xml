<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.dao.OrderMapper">
    <select id="select" parameterType="map" resultType="OrderDto">
        SELECT *
        FROM ord
        WHERE ord_cd = #{ordCd}
        AND cust_id = #{custId}
    </select>
    <select id="lastOrder" parameterType="string" resultType="OrderDto">
        SELECT *
        FROM ord
        WHERE cust_id = #{custId}
        ORDER BY ord_dttm desc
        LIMIT 1;
    </select>
    <select id="selectAllByMonth" parameterType="map" resultType="OrderDto">
        SELECT *
        FROM ord
        WHERE cust_id=#{custId}
        AND ord_dttm >= DATE_SUB(NOW(), INTERVAL #{i} MONTH)
        ORDER BY ord_dttm desc
    </select>
    <select id="selectAllByDate" parameterType="map" resultType="OrderDto">
        SELECT *
        FROM ord
        WHERE cust_id=#{custId}
        AND ord_dttm BETWEEN #{startDate} AND #{endDate}
        ORDER BY ord_dttm desc
    </select>
    <select id="count" resultType="int">
        SELECT count(*)
        FROM ord
    </select>
    <select id="getAllOrd" parameterType="map" resultType="OrderDto">
        SELECT *
        FROM ord
        ORDER BY seq desc
        LIMIT #{offset}, #{pageSize}
    </select>
    <select id="getAllOrder" resultType="OrderDto">
        SELECT *
        FROM ord
        ORDER BY seq desc
    </select>
    <insert id="insert" parameterType="OrderDto">
        INSERT INTO ord
            (ord_cd, cust_id, cust_name, main_prodCd, prod_name, tot_prod_Cnt, tot_prc, tot_qty, tot_dc_prc, dlv_addr_id, dlv_prc, dlv_msg, fin_prc)
        VALUES
            (#{ordCd}, #{custId}, #{custName}, #{mainProdCd}, #{prodName}, #{totProdCnt}, #{totPrc}, #{totQty}, #{totDcPrc}, #{dlvAddrId}, #{dlvPrc}, #{dlvMsg}, #{finPrc})
    </insert>
    <update id="update" parameterType="OrderDto">
        UPDATE ord
        SET cfm_yn = #{cfmYn}
          , ord_stus = CASE
                          WHEN cfm_yn = 'Y' THEN '주문확정'
                          WHEN cfm_yn = 'C' THEN '취소완료'
                          WHEN cfm_yn = 'R' THEN '반품신청'
                          WHEN cfm_yn = 'N' THEN '주문완료' END
          , stus_chg_dttm = NOW()
        WHERE ord_cd = #{ordCd}
        AND cust_id = #{custId}
    </update>

    <select id="selectAllPage" resultType="OrderDto">
        SELECT *
        FROM ord
        ORDER BY ord_dttm desc
    </select>

    <select id="selectPage" parameterType="map" resultType="OrderDto">
        SELECT *
        FROM ord
        WHERE cust_id = #{custId}
        ORDER BY ord_dttm desc
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="getStat" resultType="map">
        SELECT IFNULL(b.prc, 0) AS prc, a.Date AS time
        FROM (
            SELECT CURDATE() - INTERVAL (a.a + (10 * b.a)) DAY as Date
            FROM (SELECT 0 as a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) as a
            CROSS JOIN (SELECT 0 as a UNION ALL SELECT 1) as b
            ) a
            LEFT JOIN (
            SELECT DATE(ORD_DTTM) AS time, SUM(FIN_PRC) AS prc
            FROM ord
            WHERE ORD_DTTM >= CURDATE() - INTERVAL 6 DAY
            GROUP BY DATE(ORD_DTTM)
            ) b ON a.Date = b.time
        WHERE a.Date >= CURDATE() - INTERVAL 6 DAY
        ORDER BY a.Date;
    </select>
    <select id="getSumAvg" parameterType="int" resultType="map">
        SELECT
            SUM(prc) AS total_sales,        -- 매출 합계
            ROUND(AVG(prc)) AS average_sales, -- 매출 평균 (소수점 제거)
            COUNT(time) AS payment_count, -- 결제 건수
            ROUND(COUNT(time) / #{i + 1.0}, 1) AS average_payment_count -- 평균 주문 건수
        FROM (
                 SELECT IFNULL(b.prc, 0) AS prc, b.time AS time
                 FROM (
                     SELECT CURDATE() - INTERVAL (a.a + (10 * b.a)) DAY as Date
                     FROM (SELECT 0 as a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) as a
                     CROSS JOIN (SELECT 0 as a UNION ALL SELECT 1) as b
                     ) a
                     LEFT JOIN (
                     SELECT DATE(ORD_DTTM) AS time, SUM(FIN_PRC) AS prc
                     FROM ord
                     WHERE ORD_DTTM >= CURDATE() - INTERVAL #{i} DAY
                     GROUP BY DATE(ORD_DTTM)
                     ) b ON a.Date = b.time
                 WHERE a.Date >= CURDATE() - INTERVAL #{i} DAY
             ) AS sales;
    </select>
</mapper>